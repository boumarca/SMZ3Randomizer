// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Randomizer.Multiplayer.Server;

#nullable disable

namespace Randomizer.Multiplayer.Server.Migrations
{
    [DbContext(typeof(MultiplayerDbContext))]
    partial class MultiplayerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.11");

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerBossState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Boss")
                        .HasColumnType("INTEGER");

                    b.Property<long>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Tracked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("TrackedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MultiplayerBossStates");
                });

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerDungeonState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Dungeon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Tracked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("TrackedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MultiplayerDungeonStates");
                });

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerGameState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastMessage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SaveToDatabase")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Seed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SendItemsOnComplete")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MultiplayerGameStates");
                });

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerItemState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Item")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("TrackedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackingValue")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MultiplayerItemStates");
                });

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerLocationState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Tracked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("TrackedTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MultiplayerLocationStates");
                });

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerPlayerState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("TEXT");

                    b.Property<string>("Config")
                        .HasColumnType("TEXT");

                    b.Property<long>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GenerationData")
                        .HasColumnType("TEXT");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneticName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WorldId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("MultiplayerPlayerStates");
                });

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerBossState", b =>
                {
                    b.HasOne("Randomizer.Shared.Multiplayer.MultiplayerGameState", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Randomizer.Shared.Multiplayer.MultiplayerPlayerState", "Player")
                        .WithMany("Bosses")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerDungeonState", b =>
                {
                    b.HasOne("Randomizer.Shared.Multiplayer.MultiplayerGameState", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Randomizer.Shared.Multiplayer.MultiplayerPlayerState", "Player")
                        .WithMany("Dungeons")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerItemState", b =>
                {
                    b.HasOne("Randomizer.Shared.Multiplayer.MultiplayerGameState", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Randomizer.Shared.Multiplayer.MultiplayerPlayerState", "Player")
                        .WithMany("Items")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerLocationState", b =>
                {
                    b.HasOne("Randomizer.Shared.Multiplayer.MultiplayerGameState", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Randomizer.Shared.Multiplayer.MultiplayerPlayerState", "Player")
                        .WithMany("Locations")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerPlayerState", b =>
                {
                    b.HasOne("Randomizer.Shared.Multiplayer.MultiplayerGameState", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerGameState", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Randomizer.Shared.Multiplayer.MultiplayerPlayerState", b =>
                {
                    b.Navigation("Bosses");

                    b.Navigation("Dungeons");

                    b.Navigation("Items");

                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
